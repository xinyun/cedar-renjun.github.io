<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Enjoy Programming, Enjoy Life]]></title>
  <link href="http://cedar-renjun.github.io/atom.xml" rel="self"/>
  <link href="http://cedar-renjun.github.io/"/>
  <updated>2014-03-23T21:20:56+08:00</updated>
  <id>http://cedar-renjun.github.io/</id>
  <author>
    <name><![CDATA[Cedar]]></name>
    <email><![CDATA[819280802@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于唐骏的一点看法]]></title>
    <link href="http://cedar-renjun.github.io/blog/2014/03/22/review-about-tangjun/"/>
    <updated>2014-03-22T12:51:52+08:00</updated>
    <id>http://cedar-renjun.github.io/blog/2014/03/22/review-about-tangjun</id>
    <content type="html"><![CDATA[<p>以下是youku 2014-03-20 做的一期访谈节目，节目的主角是唐骏</p>

<div class="video-container">
    <embed src="http://player.youku.com/player.php/sid/XNjg1MDgyNDEy/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash">      
    </embed>
</div>


<p>关于唐骏，百度百科介绍如下：</p>

<blockquote><p>  唐骏为中国职业经理人。曾留学日本和美国，有“打工皇帝”之称。1994年加入微软公司美国总部，先后担任微软全球技术中心总经理，微软中国公司总裁。唐骏是微软公司历史上唯一两次获得比尔盖茨杰出奖，最高荣誉奖的员工，还获得微软公司的杰出管理奖，被微软公司定为未来微软公司的未来领袖之一。唐骏也获得了微软公司历史上唯一的微软中国终身荣誉总裁的称号，2004年出任中国最大的互动娱乐公司盛大网络公司总裁，并帮助盛大公司在美国纳斯达克成功上市，被华尔街誉为中国资本的第一人。2008年唐骏先生以“十亿“身价转会新华都集团出任总裁兼CEO。同时唐骏被中国媒体广泛誉为中国“第一职业经理人”和中国第一CEO。2013年1月28日，唐骏通过个人微博向外界宣布卸任新华都，专注港澳资讯，任董事长兼CEO。</p></blockquote>

<p>其实很多人是从方舟子打假开始才知道唐骏这个人的，打假这方面的报道很多很多，各位可以自行搜索</p>

<p>这里想谈一下我的观点</p>

<!-- more -->


<blockquote><p>  1  人无完人，自己不完美，也不用要求别人完美<br/>
  2  成功一定是有方法的，失败一定是有原因的</p></blockquote>

<p>中国人的嫉妒心是很强的，自己做不到某些事情，看到别人做到后，心里极度不平衡，不去从自身找原因，反而拿着放大镜去研究别人，如果找到一个缺点，就大喊：“哈哈，看吧，我就说，他成功肯定有猫腻，靠某些手段”</p>

<p>受中国传统道德伦理的影响，在人们眼中，诚实，做人要厚道，勤奋的人才配的上成功</p>

<p>类似的情况还有</p>

<p>技术人员总是感觉销售人员什么能力没有，就靠一张嘴，凭什么他们拿那么高的工资</p>

<p>不客气的说一句：</p>

<p><strong>唐骏即便是造假了，和你有一毛钱的关系么！</strong></p>

<p><strong>你看销售人员工资高，你有本事也去做销售啊！</strong></p>

<p>总是关注别人的弱点，不足，并嘲笑打击，这是典型的弱者思维</p>

<p>我们应该关注别人身上的优点，并拿来借用学习，不断增强自己的功力</p>

<p>别人成功肯定是有方法的，失败一定是有原因的</p>

<p>不妨思考以下几个问题：</p>

<ul>
<li>唐骏为什么能做到这么高的职位，难道微软和盛大都是2B？</li>
<li>为什么有的销售能挣这么多钱？</li>
<li>为什么有的销售业绩很差？</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doxygen 10 分钟入门教程]]></title>
    <link href="http://cedar-renjun.github.io/blog/2014/03/21/learn-doxygen-in-10-minutes/"/>
    <updated>2014-03-21T22:02:07+08:00</updated>
    <id>http://cedar-renjun.github.io/blog/2014/03/21/learn-doxygen-in-10-minutes</id>
    <content type="html"><![CDATA[<h2>综述</h2>

<p>本文试图在10分钟内，帮助您了解文档生成工具Doxygen的基本概念，并熟悉Doxygen的使用规则，同时给予深入学习的一些方向性建议。</p>

<p>因为本文仅仅是帮助初学者入门，所以选例方面较为简单，缺乏广度和深度。后期会编写一些深度学习Doxygen的文章，敬请关注</p>

<h2>Doxygen是什么东西？</h2>

<p>Doxygen是一款文档生成工具，它可以从代码中提取出相应的文档，并组织，输出成各种漂亮的文档（如HTML，PDF，RTF等）</p>

<p>有了Doxygen工具，程序员便可以在写代码的时候，直接内嵌文档，再也不需要为某个功能代码单独写文档，从而最大程度的保持了文档和代码的统一性</p>

<p>另外，Doxygen 1.8.x版本中增加对markdown的支持，也支持内嵌部分HTML标签，从而极大的简化了文档编写难度，甚至，您可以用Doxygen生成一个静态的网站。</p>

<p>目前Doxygen支持C/C++，Objective-C, C#，PHP等语言，支持多平台(Mac OS, Linux, Windows)，更多信息，请参考<a href="http://www.stack.nl/~dimitri/doxygen/index.html">Doxygen官方介绍</a></p>

<!-- more -->


<h2>Doxygen适合什么人？</h2>

<p>适合对代码文档有一定要求的程序员</p>

<p><strong>PS：</strong>能看到这里的程序员，一定是位有追求，有理想的工程狮，哈哈，就你了，go on please</p>

<h2>开始学习Doxygen</h2>

<p><strong>注：</strong>在继续阅读之前，请确保您</p>

<ul>
<li>知道如何在windows环境下调出命令窗口</li>
<li>具有简单的编程基础</li>
</ul>


<h3>下载和安装</h3>

<p>doxygen最新版为1.8.6版本，下载链接如下</p>

<pre><code>http://sourceforge.net/projects/doxygen/files/latest/download?source=files
</code></pre>

<p>下载完成后，双击安装，采用默认设置就ok，这里不做过多介绍</p>

<h3>准备源文件</h3>

<p>这里准备了三个简单的C语言源代码</p>

<pre><code>main.c  // 演示如何调用Dev中的设备接口
dev.c   // Dev设备的实现代码
dev.h   // Dev设备的操作接口
</code></pre>

<p>具体代码如下：</p>

<figure class='code'><figcaption><span> (main.c)</span> <a href='http://cedar-renjun.github.io/downloads/code/2014/03/21/OriginSourceCode/main.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;dev.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CNT_MAX 10</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">DEV_Example</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Dev_Init</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">CNT_MAX</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Dev_PrintInt</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Dev_Close</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">DEV_Example</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (dev.c)</span> <a href='http://cedar-renjun.github.io/downloads/code/2014/03/21/OriginSourceCode/dev.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">Dev_Init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Dev Initialize OK!</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">Dev_PrintInt</span><span class="p">(</span><span class="kt">int</span> <span class="n">number</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Print IntType number: %d</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">number</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">Dev_Close</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Dev Close OK!</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (dev.h)</span> <a href='http://cedar-renjun.github.io/downloads/code/2014/03/21/OriginSourceCode/dev.h'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="kt">void</span> <span class="nf">Dev_Init</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">int</span> <span class="nf">Dev_PrintInt</span><span class="p">(</span><span class="kt">int</span> <span class="n">number</span><span class="p">);</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">void</span> <span class="nf">Dev_Close</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>将这3个源文件放在某个文件夹内，这里以GettingStart文件夹为例，其目录组织结构如下所示</p>

<pre><code>GettingStart
   |-- dev.c
   |-- dev.h
   |-- main.c
</code></pre>

<h3>第一次尝试</h3>

<p>接下来，我们看看，不编写任何注释的情况下，Doxygen会怎么生成文档</p>

<p>打开命令行(powershell)窗口，并CD到GettingStart目录下，输入下面命令</p>

<pre><code>doxygen -g  
</code></pre>

<p>Powershell的返回信息如下，同时，我们的GettingStart目录下增加了一个名叫Doxyfile的文件(注意第21行)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="n">F</span><span class="err">:</span><span class="p">\</span><span class="n">Doxygen_Demo</span><span class="p">\</span><span class="n">GettingStart</span><span class="p">&gt;</span> <span class="n">doxygen</span> <span class="n">-g</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">Configuration</span> <span class="n">file</span> <span class="p">`</span><span class="n">Doxyfile</span><span class="err">&#39;</span> <span class="n">created</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Now</span> <span class="n">edit</span> <span class="n">the</span> <span class="n">configuration</span> <span class="n">file</span> <span class="n">and</span> <span class="n">enter</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">doxygen</span> <span class="n">Doxyfile</span>
</span><span class='line'>
</span><span class='line'><span class="n">to</span> <span class="n">generate</span> <span class="n">the</span> <span class="n">documentation</span> <span class="k">for</span> <span class="n">your</span> <span class="n">project</span>
</span><span class='line'>
</span><span class='line'><span class="n">PS</span> <span class="n">F</span><span class="err">:</span><span class="p">\</span><span class="n">Doxygen_Demo</span><span class="p">\</span><span class="n">GettingStart</span><span class="p">&gt;</span> <span class="n">ls</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">dir</span><span class="err">:</span> <span class="n">F</span><span class="err">:</span><span class="p">\</span><span class="n">Doxygen_Demo</span><span class="p">\</span><span class="n">GettingStart</span>
</span><span class='line'>
</span><span class='line'><span class="n">Mode</span>                <span class="n">LastWriteTime</span>     <span class="n">Length</span> <span class="n">Name</span>
</span><span class='line'><span class="p">----</span>                <span class="p">-------------</span>     <span class="p">------</span> <span class="p">----</span>
</span><span class='line'><span class="n">-a</span><span class="p">---</span>         <span class="n">2014</span><span class="p">/</span><span class="n">3</span><span class="p">/</span><span class="n">22</span>     <span class="n">15</span><span class="err">:</span><span class="n">44</span>        <span class="n">212</span> <span class="n">dev</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">-a</span><span class="p">---</span>         <span class="n">2014</span><span class="p">/</span><span class="n">3</span><span class="p">/</span><span class="n">22</span>     <span class="n">16</span><span class="err">:</span><span class="n">14</span>        <span class="n">119</span> <span class="n">dev</span><span class="p">.</span><span class="n">h</span>
</span><span class='line'><span class="n">-a</span><span class="p">---</span>         <span class="n">2014</span><span class="p">/</span><span class="n">3</span><span class="p">/</span><span class="n">22</span>     <span class="n">16</span><span class="err">:</span><span class="n">46</span>     <span class="n">103431</span> <span class="n">Doxyfile</span>
</span><span class='line'><span class="n">-a</span><span class="p">---</span>         <span class="n">2014</span><span class="p">/</span><span class="n">3</span><span class="p">/</span><span class="n">22</span>     <span class="n">15</span><span class="err">:</span><span class="n">56</span>        <span class="n">236</span> <span class="n">main</span><span class="p">.</span><span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个Doxyfile就是Doxygen工程的配置文件，里面含有一些配置信息</p>

<p>接下来我们做一些修改</p>

<p>在默认情况下，Doxygen会输出HTML和LATEX形式文档，LATEX主要用于生成PDF，这里暂时不需要，所以我们禁用LATEX输出</p>

<p>在Doxyfile中将下面一行</p>

<pre><code>GENERATE_LATEX         = YES
</code></pre>

<p>修改为</p>

<pre><code>GENERATE_LATEX         = NO
</code></pre>

<p>接下来，我们修改HTML的显示方式，将下面两行代码</p>

<pre><code>DISABLE_INDEX          = NO  
GENERATE_TREEVIEW      = NO  
</code></pre>

<p>修改为</p>

<pre><code>DISABLE_INDEX          = YES  
GENERATE_TREEVIEW      = YES  
</code></pre>

<p>至于为什么修改，暂时不用深究，我们后期再讨论</p>

<p>现在我们就可以输出文档了，在命令行（powershell)下输入</p>

<pre><code>doxygen .\Doxyfile
</code></pre>

<p><strong>注：</strong>这个命令称为编译，下文直接用<strong>编译</strong>来代替表示这个指令</p>

<p>这时，Doxygen会从我们的代码中提取相应的文档，并生成HTML文件，进入GettingStart
文件夹内，双击打开HTML文件夹下的index.html文件</p>

<p>点击<a href="http://cedar-renjun.github.io/assets/2014/03/21/html_output_1/index.html">这里</a>查看</p>

<p>可以看到，当Doxygen对没有任何注释的代码，也可以生成对应的文档框架，不过，仅仅是框架而已，没有太大作用。Doxygen针对这种情况，专门设置了一个选项<code>EXTRACT_ALL</code>，默认情况下为<code>NO</code>状态，手工设置为YES后，Doxygen会尽可以的从代码中提取信息，这里我们将Doxyfile中的</p>

<pre><code>EXTRACT_ALL            = NO
</code></pre>

<p>改为</p>

<pre><code>EXTRACT_ALL            = YES
</code></pre>

<p>然后再次编译，前后输出结果，对比如下：</p>

<p><img src="http://cedar-renjun.github.io/images/2014/03/21/NakeCodeComp.png" alt="对比结果" /></p>

<p><strong>注：</strong>请点击<a href="http://cedar-renjun.github.io/assets/2014/03/21/html_output_2/index.html">这里</a>查看<code>EXTRACT_ALL = YES</code>的输出结果</p>

<h3>最终效果展示</h3>

<p>接下来，我们为代码中增加对应的描述信息</p>

<p>Doxygen制定了一套注释规范，在保证正确输出文档的同时，也兼顾了良好的可读性。对编程人员来说，只需在编写注释的时候，稍微注意格式，即可生成非常优秀的文档，额外增加的工作量可忽略不计。</p>

<p>下面就是某个函数的Doxygen注释</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//*****************************************************************************</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//! \brief Write one byte to special register</span>
</span><span class='line'><span class="c1">//!</span>
</span><span class='line'><span class="c1">//! This function is to write one byte to LIS302DL register,one byte will be</span>
</span><span class='line'><span class="c1">//! writen in appointed address.</span>
</span><span class='line'><span class="c1">//!</span>
</span><span class='line'><span class="c1">//! \param RegAddr specifies the target register address.</span>
</span><span class='line'><span class="c1">//! \param Data is the data written to target register.</span>
</span><span class='line'><span class="c1">//!</span>
</span><span class='line'><span class="c1">//! \return Indicate the status of operation which can be one of the following</span>
</span><span class='line'><span class="c1">//! value \b SUCCESS or  \b FAILURE .</span>
</span><span class='line'><span class="c1">//!</span>
</span><span class='line'><span class="c1">//! \note This function is used by internal, user MUST NOT call it in your </span>
</span><span class='line'><span class="c1">//!  Application.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//*****************************************************************************</span>
</span><span class='line'><span class="k">static</span> <span class="n">Result</span> <span class="nf">_I2CRegWriteByte</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="n">RegAddr</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">Data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Result</span> <span class="n">retv</span> <span class="o">=</span> <span class="n">SUCCESS</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Begin to I2C Transfer</span>
</span><span class='line'>    <span class="c1">// first send START signal to control I2C bus</span>
</span><span class='line'>    <span class="c1">// then send 7-bit address and R/W bit to I2C salve</span>
</span><span class='line'>    <span class="c1">// at last send target register address</span>
</span><span class='line'>    <span class="n">retv</span> <span class="o">=</span> <span class="n">xI2CMasterWriteS1</span><span class="p">(</span><span class="n">LIS302DL_PIN_I2C_PORT</span><span class="p">,</span> <span class="n">LIS302DL_I2C_ADDR</span><span class="p">,</span>
</span><span class='line'>            <span class="n">RegAddr</span><span class="p">,</span> <span class="n">I2C_TRAN_NOT_END</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">retv</span> <span class="o">!=</span> <span class="n">SUCCESS</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">FAILURE</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Send the wanted data to I2C bus</span>
</span><span class='line'>    <span class="c1">// then Send STOP signal to release I2C bus</span>
</span><span class='line'>    <span class="n">retv</span> <span class="o">=</span> <span class="n">xI2CMasterWriteS2</span><span class="p">(</span><span class="n">LIS302DL_PIN_I2C_PORT</span><span class="p">,</span> <span class="n">Data</span><span class="p">,</span> <span class="n">I2C_TRAN_END</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">retv</span> <span class="o">!=</span> <span class="n">SUCCESS</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">FAILURE</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span><span class="p">(</span><span class="n">SUCCESS</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以看到，程序代码可读性非常好，即便没有生成单独的文档，任何具有一定英文基础的同学都可以
轻松的了解到函数的用法和入口参数，注意事项等信息。</p>

<p>接下来，我们采用Doxygen语法为main.c dev.c dev.h添加注释信息，完成后的效果如下所示：</p>

<figure class='code'><figcaption><span> (main.c)</span> <a href='http://cedar-renjun.github.io/downloads/code/2014/03/21/FinalSourceCode/main.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//! \file main.c </span>
</span><span class='line'><span class="c1">//! This is an simple example show developer how to use dev api to print int number.</span>
</span><span class='line'><span class="c1">//!</span>
</span><span class='line'><span class="c1">//! \author    Cedar</span>
</span><span class='line'><span class="c1">//! \version   V1.0</span>
</span><span class='line'><span class="c1">//! \date      2014-03-23</span>
</span><span class='line'><span class="c1">//! \copyright GNU Public License V3.0</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;dev.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CNT_MAX  10  </span><span class="c1">//!&lt; The maxium number of print</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//! Simple device example.</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">DEV_Example</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Dev_Init</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">CNT_MAX</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Dev_PrintInt</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Dev_Close</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//! Application Entry</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">DEV_Example</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (dev.c)</span> <a href='http://cedar-renjun.github.io/downloads/code/2014/03/21/FinalSourceCode/dev.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//! \file dev.c </span>
</span><span class='line'><span class="c1">//! the implement of simple device.</span>
</span><span class='line'><span class="c1">//!</span>
</span><span class='line'><span class="c1">//! \author    Cedar</span>
</span><span class='line'><span class="c1">//! \version   V1.0</span>
</span><span class='line'><span class="c1">//! \date      2014-03-23</span>
</span><span class='line'><span class="c1">//! \copyright GNU Public License V3.0</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//! Simple device status.</span>
</span><span class='line'><span class="c1">//! </span>
</span><span class='line'><span class="c1">//! \warning This variable is designed for internal, user \b MUST \b NOT call it.</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">__DevStatus</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Dev_Init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Print debug information</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Dev Initialize OK!</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Dev_PrintInt</span><span class="p">(</span><span class="kt">int</span> <span class="n">number</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Print IntType number: %d</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">number</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Dev_StatusCheck</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span>   <span class="p">(</span><span class="n">__DevStatus</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Dev_Close</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Dev Close OK!</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (dev.h)</span> <a href='http://cedar-renjun.github.io/downloads/code/2014/03/21/FinalSourceCode/dev.h'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//! \file dev.h</span>
</span><span class='line'><span class="c1">//!  Simple device user API.</span>
</span><span class='line'><span class="c1">//!</span>
</span><span class='line'><span class="c1">//! \author    Cedar</span>
</span><span class='line'><span class="c1">//! \version   V1.0</span>
</span><span class='line'><span class="c1">//! \date      2014-03-23</span>
</span><span class='line'><span class="c1">//! \copyright GNU Public License V3.0</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//! \addtogroup Dev_Status  Simple device status information.</span>
</span><span class='line'><span class="c1">//! @{</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define DEV_ON      ((int)(1))      </span><span class="c1">//!&lt; Simple device is power on.</span>
</span><span class='line'><span class="cp">#define DEV_OFF     ((int)(0))      </span><span class="c1">//!&lt; Simple device is power off.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//! @}</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//! \addtogroup Dev_API  Simple device APIs list.</span>
</span><span class='line'><span class="c1">//! @{</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//! \brief  Initialize simple device.</span>
</span><span class='line'><span class="c1">//!</span>
</span><span class='line'><span class="c1">//! \param  none.</span>
</span><span class='line'><span class="c1">//! \retval none.</span>
</span><span class='line'><span class="c1">//!</span>
</span><span class='line'><span class="c1">//! \note   This function \b MUST be called first before others function.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">void</span> <span class="nf">Dev_Init</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//! \brief  Print Int number to terimal device.</span>
</span><span class='line'><span class="c1">//!</span>
</span><span class='line'><span class="c1">//! \param  [in] number is the data you want to print.</span>
</span><span class='line'><span class="c1">//! \retval the number of print information, in bytes. return zero indicate print error !.</span>
</span><span class='line'><span class="c1">//!</span>
</span><span class='line'><span class="c1">//! \note</span>
</span><span class='line'><span class="c1">//! * Be sure you have called \ref Dev_Init function before call this fuction.</span>
</span><span class='line'><span class="c1">//! * Remember to check return value.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">int</span> <span class="nf">Dev_PrintInt</span><span class="p">(</span><span class="kt">int</span> <span class="n">number</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//! \brief  Check simple device status information.</span>
</span><span class='line'><span class="c1">//!</span>
</span><span class='line'><span class="c1">//! \param  none.</span>
</span><span class='line'><span class="c1">//! \retval status information of simple device, which can be one of the following value:\n</span>
</span><span class='line'><span class="c1">//!  - \ref DEV_ON</span>
</span><span class='line'><span class="c1">//!  - \ref DEV_OFF</span>
</span><span class='line'><span class="c1">//!  \n More information, please reference \ref Dev_Status.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">int</span> <span class="nf">Dev_StatusCheck</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//! \brief  Close simple device.</span>
</span><span class='line'><span class="c1">//!</span>
</span><span class='line'><span class="c1">//! \param  none.</span>
</span><span class='line'><span class="c1">//! \retval none.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">void</span> <span class="nf">Dev_Close</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//! @}</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//! \example main.c</span>
</span><span class='line'><span class="c1">//!  Show how to use simple device to print int number.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//***************************************************************************************</span>
</span></code></pre></td></tr></table></div></figure>


<p>用Doxygen编译后，生成的HTML文档如下所示：</p>

<p><img src="http://cedar-renjun.github.io/images/2014/03/21/Doxygen_Final_Demo.jpg" alt="最终效果" /></p>

<p><strong>注：</strong>请点击<a href="http://cedar-renjun.github.io/assets/2014/03/21/html_output_final/index.html">这里</a>查看详细的输出文档。</p>

<p>Doxygen把代码中的文件，例子，函数，宏等信息提取出来，一目了然</p>

<p>这里要说一下，如果没有Doxygen，我们该怎么做呢？</p>

<p>很多人会用SourceInsight这个代码阅读工具来辅助阅读，功能非常强大，但你电脑上必须装SI，否则没法阅读，这就限制了使用范围，从这里可以看到Doxygen的优势所在：提取代码文档，并将所有部分链接起来，形成统一整体</p>

<p>也许还有人会说，SI也可以生成继承图，调用图等图标，Doxygen可以吗？完全可以的，借助于Dot工具，Doxygen可以生成各种关系图表</p>

<p><strong>注：</strong>Doxygen配合Dot工具生成图表以及Dot工具的用法，后期专门写一篇文章来介绍</p>

<h3>一步一步跟我学Doxygen</h3>

<p>现在让我们开始从0开始，一步步为代码添加注释信息，最终生成上面所看到的效果</p>

<p>首先为函数添加注释信息，这是必须要做的。这里有个选择性问题，添加到哪里呢？.c文件？.h文件？</p>

<p>一般来说：</p>

<ul>
<li>.h文件代表模块对外的接口最小信息，面向模块使用者</li>
<li>.c文件代表模块的实现代码，面向的是开发者</li>
</ul>


<p>在实际编程中，事先约定各个模块间的接口，然后将不同的模块分配给不同的开发者，于此同时，测试人员根据接口要求，编写测试代码，这就完全保证了并发编程和白盒测试要求。</p>

<p>这里我们可以看到，文档主要是用来描述接口信息的，所以，我对代码的注释规定如下：</p>

<ul>
<li>模块对外接口，仅在.h中提供注释信息</li>
<li>模块内部辅助函数，全部用static设为私有函数，同时仅在.c中保留注释信息</li>
</ul>


<p>当然，您也可以同时为.c .h的接口函数编写两份完全一样的注释信息，但这么做，您会同时维护两份信息，出错的概率会更大些。</p>

<p>确定了注释位置，下一步考虑一个函数需要哪些信息</p>

<p>一般来说，需要函数功能，入口参数，返回值，注意事项，某些时候还需要说明上下文环境，从而保证函数能正确执行</p>

<p>比如这个函数</p>

<pre><code>extern int Dev_PrintInt(int number); 
</code></pre>

<p>它的功能就是打印一个整形数据，传入参数为整数，返回的是成功打印的数据长度（字节为单位），同时呢，我们在调用这个函数之前，必须要先初始化Dev设备</p>

<p>ok，这就是所有接口信息，稍微规范一下，就变成了下面的样子</p>

<pre><code>// 函数功能：打印整数
// 入口参数：number为一个整数类型
// 返回结构：返回的是成功打印的数据长度（字节为单位）
// 注意事项：
//          1：在调用本函数前，请确保已经调用Dev_Init初始化设备
//          2：请注意函数返回值，如果该值为0，则说明函数执行失败

extern int Dev_PrintInt(int number); 
</code></pre>

<p>用英文来书写呢，则变成下面的样子</p>

<pre><code>//***************************************************************************************
//
// brief  : Print Int number to terimal device.
//
// param  : number is the data you want to print.
// retval : the number of print information, in bytes. return zero indicate print error !
//
// Note:
//      * Be sure you have called \ref Dev_Init function before call this fuction.
//      * Remember to check return value.
//
//***************************************************************************************
extern int Dev_PrintInt(int number);
</code></pre>

<p>注释信息写完了，一般来说，函数能达到这种信息程度就ok了，但既然要生成文档，就不得不考虑一个问题</p>

<p>如果你是Doxygen作者，怎么从上面的注释里面提取信息呢，信息那么多，有<code>*</code>号，有各种文字信息。</p>

<p>你可以将所有的注释信息都输出出来，但这么做，等于没有分类整理，同时也包含了杂乱信息，比如一排<code>*</code></p>

<p>另外一个解决方法是：设置某些特殊字符，比如<code>function</code>表示，一旦检测到这个特殊标记，则认为是接下来
的一行是函数功能描述。但这么做，万一用户的注释里面出现很多个function，你怎么识别哪个是普通文本，
哪个是特殊标记？</p>

<p>也许你会说了，可以采用$FUNCTION$这种形式啊，恩，这么做是可行的，可以确保识别出来特殊标记</p>

<p>接下来，还有一个问题，我们上面的注释中，有很多<code>*</code>号，仅仅起到美观和格式化的作用，当然不希望在
输出文档中显示这些东西，问题是你怎么识别这些符号，并不显示呢？也许你会说，可以强制规定注释的
格式，不让用户在代码中写很多<code>*</code>，ok，假设用户同意这么做。那接下来呢，如果我希望在代码中写某些话
，但是不希望输出到文档中，比如“祝某党长命百岁，领导是2B”等等，你又该怎么做呢？</p>

<p>正向思考遇到问题时，不妨反向考虑，这是谁的问题：是我设计思路的问题还是用户用法的问题？</p>

<p>困难重重，肯定是设计思路的问题</p>

<p>如果设计一个标记符，将普通注释和要生成的文档注释区分开来，就能解决问题了。</p>

<p>Doxygen的用法，说白了，就是为了解决上面提到的两个问题：</p>

<pre><code>怎么区分普通注释和输出注释  
怎么在输出注释里面，识别特殊标记和普通文本  
</code></pre>

<p>ok，讲到这里，基本把Doxygen的机制给解释清楚了，如果您还不理解，最简单的方法就是把你假设为Doxygen
作者，重新推演一遍。</p>

<p>下面咱们看看Doxygen怎么解决这两个问题的</p>

<p><strong>区分普通注释和特殊注释</strong></p>

<p>对于C/C++语言来说，注释形式有两种</p>

<pre><code>//
/* */
</code></pre>

<p>Doxygen通过在这里增加<code>*</code>，<code>/</code>，<code>!</code>来作为特殊标记，比如</p>

<p>对于<code>/* */</code>这种注释来说，正常注释为</p>

<pre><code>/*
 * 正常注释
 */
</code></pre>

<p>Doxygen在注释第一个<code>*</code>后，设置<code>*</code>或<code>!</code>作为标志，如果检测到有这些，
就将接下来的注释作为导出文档来解释</p>

<pre><code>/**
 * 要输出成文档的注释
 */

 或者

/*!
 * 要输出成文档的注释
 */
</code></pre>

<p>同时，中间的<code>*</code>号可以省略，像这样</p>

<pre><code>/**
   要输出成文档的注释
 */

 或者

/*!
   要输出成文档的注释
 */
</code></pre>

<p>对于<code>//</code>这种类型的注释，Doxygen在第二个<code>/</code>后，增加<code>!</code>或<code>/</code>作为区分标志，如果检测到有这些，
就将接下来的注释作为导出文档来解释</p>

<pre><code>/// 要输出成文档的注释

或者

//! 要输出成文档的注释
</code></pre>

<p>对于这种呢，有一个潜在的问题，很多时候，我们需要在把注释放到后面，比如下面这种</p>

<pre><code>#define DEV_ON      ((int)(1))      //! Simple device is power on.
#define DEV_OFF     ((int)(0))      //! Simple device is power off.
</code></pre>

<p>如果真要这么写的话，Doxygen会把<code>//! Simple device is power on.</code>当做<code>DEV_OFF</code>的注释，这
当然不是我们所希望的! 怎么办呢，只好再加一个特殊标记了，Doxygen针对这种情况，需要在<code>!</code>后
再增加一个<code>&lt;</code>标志符，如果检测到这个，则认为这个注释是为前面代码准备的，所以，上面的注释应该
这么写</p>

<pre><code>#define DEV_ON      ((int)(1))      //!&lt; Simple device is power on.
#define DEV_OFF     ((int)(0))      //!&lt; Simple device is power off.
</code></pre>

<p>做到这里，Doxygen就可以正确区分普通注释和特殊注释了，^_^</p>

<p>更详细的信息，请参考<a href="http://www.stack.nl/~dimitri/doxygen/manual/docblocks.html">Doxygen注释规范</a></p>

<p><strong>区分特殊标记符和普通文本</strong></p>

<p>ok，现在可以识别出了普通注释和特殊注释，接下来，Doxygen是怎么从特殊注释里面提取信息的呢</p>

<p>比如</p>

<p><img src="http://cedar-renjun.github.io/images/2014/03/21/Doxygen_Final_Demo.jpg" alt="最终效果" /></p>

<p>注意左边导航栏，Doxygen怎么识别出这是一个函数/宏呢？答案还是采用特殊标记</p>

<p><strong>注：</strong>提到特殊标记，其实吧，编程语言非常常用，比如HTML就是典型的markup语言，一堆一堆的括号，看着就头疼</p>

<p>Doxygen采用<code>\</code>和<code>@</code>作为特殊标记符，当在特殊注释里面检测到了特殊标记符，则接下来检测紧跟单词是不是Doxygen
事先规定好的，如果是，则将按照特定的规则来解释紧跟着的注释；如果不是呢，则将<code>\</code>和<code>@</code>解释为普通文本，聪明吧</p>

<p>可能有点拗口，下面给你个例子</p>

<pre><code>//***************************************************************************************
//
//! \brief  Print Int number to terimal device.
//!
//! \param  [in] number is the data you want to print.
//! \retval the number of print information, in bytes. return zero indicate print error !.
//!
//! \note
//! * Be sure you have called \ref Dev_Init function before call this fuction.
//! * Remember to check return value.
//
//***************************************************************************************
extern int Dev_PrintInt(int number);
</code></pre>

<p>看到了吧，这里的<code>\brief</code>和<code>\param</code>都是特殊符号，表示简要描述和参数。万一你小手一抖，把<code>\param</code>
写成了<code>\parame</code>，那就悲剧了，因为Doxygen不认识<code>parame</code>，所以它会把这句话当做是普通文本来处理</p>

<p>其实，上面的<code>\</code>换成<code>@</code>也是ok的，如下所示</p>

<pre><code>//***************************************************************************************
//
//! @brief  Print Int number to terimal device.
//!
//! @param  [in] number is the data you want to print.
//! @retval the number of print information, in bytes. return zero indicate print error !.
//!
//! @note
//! * Be sure you have called \ref Dev_Init function before call this fuction.
//! * Remember to check return value.
//
//***************************************************************************************
extern int Dev_PrintInt(int number);
</code></pre>

<p>相信某些玩过ARM芯片的，对这类注释非常熟悉，官方库都是采用Doxygen语法规则注释的，我也写过一套LPC17xx
的库 <a href="https://github.com/cedar-renjun/Cox_LPC17xx">https://github.com/cedar-renjun/Cox_LPC17xx</a></p>

<p>那么，我们怎么知道Doxygen认识哪些符号呢，参考Doxygen自带手册啊，<a href="http://www.stack.nl/~dimitri/doxygen/manual/commands.html">Special Commands</a>章节</p>

<p>授之于鱼，不如授之于渔，该说的多介绍完了，至于具体的指令含义和用法，自己慢慢看手册呗</p>

<p>注：点击<a href="http://cedar-renjun.github.io/assets/2014/03/21/DoxygenGettingStart.zip">这里</a>下载GettingStart的压缩包，包含源码，HTML输出文档，配置脚本
如果在看脚本的时候遇到问题，请参考<a href="http://www.stack.nl/~dimitri/doxygen/manual/config.html">这里</a></p>

<h3>深入研究</h3>

<p>不好意思，文章有点长，估计过了10分钟，so bad，o(╯□╰)o</p>

<p>根据20/80原则，一个软件，常用的仅仅是20%的功能，其余80%功能是极少用到的</p>

<p>上面仅仅介绍了Doxygen的设计思想和学习范例，抓住了纲领，相信您通过研究代码和帮助手册，很快就能学会使用Doxygen</p>

<p>如果您想深入研究Doxygen，比如markdown和代码无缝交互，插入HTML代码，定制HTML网页，CSS等功能，
请参考Doxygen帮助手册，里面有详细说明，如果学习过程中，遇到问题，欢迎和我交流，互相学习</p>

<hr />

<blockquote><p>Do one thing and do it well</p><footer><strong>Cedar</strong> <cite>QQ:819280802</cite></footer></blockquote>


<hr />

<h2>参考资料</h2>

<ol>
<li><p><a href="http://www.stack.nl/~dimitri/doxygen/index.html">Doxygen官网</a></p></li>
<li><p><a href="http://www.stack.nl/~dimitri/doxygen/manual/commands.html">Doxygen支持的命令</a></p></li>
<li><p><a href="http://www.ibm.com/developerworks/cn/aix/library/au-learningdoxygen/">IBM &ndash; 学习用doxygen生成源码文档</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[王石：你没变强只因你一直很舒服]]></title>
    <link href="http://cedar-renjun.github.io/blog/2014/03/21/how-to-be-stronger/"/>
    <updated>2014-03-21T20:27:43+08:00</updated>
    <id>http://cedar-renjun.github.io/blog/2014/03/21/how-to-be-stronger</id>
    <content type="html"><![CDATA[<p>这个世界上有两种人，一种人是强者，一种人是弱者。强者给自己找不适，弱者给自己找舒适。想要变得更强，就必须要学会强者的必备技能，那就是让不适变得舒适</p>

<p>如果你学会了这种技能，你可以搞定很多事情，例如克服拖延，健身，学习新语言，探索未知领域等等。但是很多人都倾向于回避这种不舒适，毕竟没有一件事情是简单的，都需要付出很多努力，忍受很多痛苦，甚至是让自己遍体鳞伤。例如，你想要改掉拖延的毛病，你必须要在任务出现的时候给自己设定时间期限，然后立即去做，直到任务完成。但是在做的过程中会有各种各样的干扰，你必须要与之相斗争，其过程必然是痛苦的，这种不适会持续很久，直到有一天你习以为常了，那么你也就不再拖延了。这个过程，就是让不适变得舒适，变得像睡觉前刷牙一样，成为一种习惯。</p>

<!-- more -->


<p>我以前一直很觉得我们应该让自己舒适一些，但是后来我明白一些不适有时并不是件坏事。事实上，你可以学会享受这种不适，例如，我每天都会做一些力量训练，虽然这点不适不会严重到我讨厌的地步，但是人就是这样的，能逃避的困难，我们总能找到借口。我开始告诉自己，既然锻炼肌肉这点痛苦和不适并不影响什么，我不如坚持下去，看看结果怎么样。于是，我制定了计划表格，让这点不适参与我的生活，形成一种习惯。每当我完成15个引体向上，我会在引体向上那一栏写上15，每个月我都会换新的纸张，并总结上个月的情况。不经意间，几个月时间我已经做了1000个引体向上了。</p>

<p>用同样的方法，我们可以训练自己早起的习惯，其实每天闹铃一响就起床和再睡几分钟起床效果没有什么区别，但是，前者会有点小不适，后者会更舒适一些。我给自己制定了闹铃一响就起床的计划。只要我能在闹铃响后就立刻爬起来，就在纸上写下+1，如今，已经坚持超过200+了。</p>

<p>后来 ，我发现任何只要是有一点不适的事情都是可以训练的，我们可以将一件不适的事情变成一种习惯，然后你会离不开它，觉得这点小痛苦其实是平淡无奇生活中的一种调味料。这件事由不适变得舒适，良好的习惯就是这样养成的。</p>

<p>具体的方法如下：</p>

<p>找到一件你想做的事情，这件事情会让你有点小不适，但是做成了以后你会收获很多。例如，健身。</p>

<p>你可以把这件事情分解成1000个独立的事件，要确保每个事件都在你能容忍的不适程度内。你可以先测试一下你尽全力最大的容忍程度，然后减去20%，从这个值开始。例如，我想要做10000个引体向上，那么分成1000份，就是每次10个。</p>

<p>开始去做，并且不要强迫自己，把它当做一种乐趣去挑战。例如，今天我做了10个，那么就剩下999份了。在以后的日子里，我可以随时随地，想做就做，只要完成这1000份事件，我的目标就达成了。</p>

<p>随着你的能力增强，逐渐增加分量，例如一个月后，你可以做到15个，3个月后，你可以做到25个。所以，10000个看似需要1000天才能完成，事实上，你可能9个月就搞定了。</p>

<p>这个方法的精髓在于把一个很大的痛苦分解成1000份小不适，然后将它融入每天的生活中，培养成习惯，将不适转变成舒适。</p>

<p>我们可以通过上面的这种方法，对自己的能力进行提升，改变一些坏习惯，培养一些好习惯。</p>

<p>1．拖延的习惯。<br/>
我们为什么要拖延，主要原因在于我们要做的事情令我们感到不适。所以，我们的头脑会产生各种各样的借口和诱惑，来促使我们去做更容易的，更舒服的事情。但是，这对我们应该完成的任务没有任何帮助。有的时候，我们甚至会变得急躁和焦虑。这种拖延的习惯从生理上来讲是我们生物的本能——趋向有利刺激，躲避有害刺激。当我们把一件事情定义为“不舒适”的时候，我们会本能的不想去做它，想方设法拖延到明天。为了将这种习惯性的拖延频率降低甚至是消除，我们将要付出很大的痛苦。但是，如果我们能够把这种痛苦分解成1000份，变成可以忍受的程度，那么事情就变得容易了。我们可以制定一个表格，叫做“战胜拖延”。每次有想要拖延的想法的时候，就立刻去做，完成任务之后就在表格上+1，当完成1000+的时候，拖延的习惯就根除了。</p>

<p>2．健身的习惯。<br/>
我们不去健身因为我们感到不舒适，但是如果每次有意识的让自己承受一些不适，会逐渐提升自己的忍耐力，一旦养成一种习惯，我们会依赖于这种不适带给自身的有利刺激，让自己感到更有活力。</p>

<p>3．阅读的习惯。<br/>
没有阅读习惯的人会把读书看成是一件很痛苦的事情。如果你能够建立的一个表格，让自己每读完一章节就在上面写上+1。逐渐养成习惯以后，改成阅读一本书写上+1，你会发现一个月你甚至能够读上5本书。然后阅读会变得不再痛苦，而成为一种习以为常的事情。当你能够跟别人谈起你阅读的著作以及你的看法，会是一件很有成就感的事情。</p>

<p>4．早起的习惯。<br/>
要培养早起的习惯首先要为自己设定一个早起的目的。而且这个目的会让你很期待第二天的早晨快点到来。如果你是一个吃货，不妨睡前准备好一顿丰盛的早餐食材，等早上起床给自己做一个很好吃的早餐。我给自己设定的早起目的是玩半个小时游戏（很神奇吧），这对我来说很有吸引力。于是，如果我想要6点半起床，那么我会把闹铃定在6点，然后快速起床，开机时间我会搞定刷牙洗脸，然后热一杯牛奶，一边打游戏，一边听着英语广播。这个好处就在于我不会再花其他时间来玩游戏了，每天我都会有固定的半小时玩游戏，并且我也不会痴迷游戏而耽误了学习。相反，这个习惯让我早起更有动力。通过这个方法，我将不适转换为舒适，让本来很难得事情变得容易而且备受期待。</p>

<p>5．写作的习惯。<br/>
读书再多如果不写出来，就不能成为自己的东西。如果不能向别人说出来，就不能得到修正与反馈，也无法知道自己的观点是处于什么样的水平。写作是一个整理自己想法的很好的工具，将平时阅读中的论点整理出来，加以思考，总结成自己的话语。这样，逻辑能力和思考能力就会逐渐加强。当然，写作是件比较痛苦的事情，你需要整理自己的思绪，并且组织语言将它们表达出来。而且，当你对着电脑的时候，还要排除各种杂事的干扰，这对专注力也是一种锻炼。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[国内UED(User Experience Design)团队汇总]]></title>
    <link href="http://cedar-renjun.github.io/blog/2014/03/21/ued-team-collection/"/>
    <updated>2014-03-21T10:23:38+08:00</updated>
    <id>http://cedar-renjun.github.io/blog/2014/03/21/ued-team-collection</id>
    <content type="html"><![CDATA[<h2>概要</h2>

<p>随着移动互联网的发展，用户个性化需求也变得越来越重要，各大互联网公司都有专门的用户体验设计（User Experience Design）设计部，专门来研究用户行为心理，从而设计出更好用户体验的应用</p>

<p>本文旨在收集汇总国内外的著名UED设计设计团队，供大家参考</p>

<h2>UED Teams</h2>

<p>1  <strong><a href="http://cdc.tencent.com/">腾讯CDC</a></strong></p>

<p>CDC成立于2006年5月18日
全称是Customer Research &amp; User Experience Design Center（即用户研究与体验设计中心）作为腾讯的核心部门之一。CDC自成立以来，就一直向着“做世界一流的互联网设计团队，为用户创造优质‘在线生活’体验”这一愿景努力，致力于不断提升腾讯全线产品的用户体验。</p>

<!-- more -->


<p>2  <strong><a href="http://gdc.qq.com/">GDC QQ游戏设计中心</a></strong></p>

<p>用心设计，快乐生活
腾讯GDC属于腾讯互动娱乐业务系统QQ游戏产品部，以全年龄层的休闲游戏设计为定位的团队。<br/>
包括了交互、视觉、重构、动画、2D、3D等。GDC的前身叫GDT(QQGAME DESIGN TEAM)，那时我们叫QQ游戏产品部美术组，团队里分为了网页视觉和界面视觉，以及交互和重构，原画小组，三月五日，我们华丽转身，QQ游戏设计中心挂牌成立，我们见证了这一伟大的历史时刻，无以言表内心的激动与欢快。现在的团队中又开设了品牌建设与flash动画以及游戏特效等很多岗位，看着逐渐成熟与庞大的家庭，我们再一次无以言表内心的激动与欢快。</p>

<p>3  <strong><a href="http://mxd.tencent.com/">腾讯移动互联网设计团队</a></strong></p>

<p>我们关注用户体验的各个层面，目标、功能、交互、视觉……<br/>
重构的同学彪了：&#8221;我们在哪里！&#8221;&ldquo;冷静，哪里没有您！&#8221;<br/>
我们是设计多面手，平面、视频、Web、Wap、手机软件、手机游戏……<br/>
传说中的SuperMan，指的就是在下了<br/>
我们天天玩手机，Iphone、Gphone、Symbian、Blackberry、WindowsMobile、Palm……<br/>
每天包里至少背俩手机，T.T 我容易么我<br/>
我们爱好广泛，摄影、游戏、模型、钓鱼、唱K、足球、羽毛球、起哄……<br/>
会不会精不精无所谓，能不能起哄才是关键╮(╯_╰)╭<br/>
最最重要的——我们男女比例平衡！<br/>
经历过 20男：3女的同学开始捶</p>

<p>4  <strong><a href="http://www.alloyteam.com/">腾讯Web前端团队 – TAT(Tencent Alloy Team)</a></strong></p>

<p>首先，我们为什么要建设这个博客呢？<br/>
第一，当然是为了我们的团队让更多的人知道我们了：）<br/>
第二，是通过写博客和分享提高我们团队在项目建设上的整体实力：）<br/>
第三，通过写博客与同行者进行交流互动，认识更多业界的人：）<br/>
第四，通过分享我们的经历，分享我们的技术，帮助到更多需要的人，为推动业界的发展做出一点贡献：）<br/>
第五，是凝聚团队向心力，提高团队使命感，发展团队文化。在这里可以自由施展，这里可以学习进步！这里就是你的家~~~</p>

<p>我们的愿景：<br/>
使用技术改变世界，成为业界卓越团队！</p>

<p>5  <strong><a href="http://isux.tencent.com/">腾讯ISUX</a></strong></p>

<p>腾讯社交用户体验设计，简称ISUX (Internet Social User Experience)，成立于2011年1月11日，是腾讯核心设计团队。我们负责腾讯的社交网络相关产品的用户体验设计与研究，重点产品包括QQ、QQ空间、QQ会员、QQ秀、QQ情侣、QQ提醒、朋友网、云平台、腾讯开放平台、广点通、Qrobot以及相关移动终端应用等。</p>

<p>为海量用户设计互联网生活的优质体验是我们的目标，团队正通过专业的视觉设计、交互设计、用户研究和前端开发等工作，实践着“通过互联网服务提升人类生活品质”的公司使命。</p>

<p>6  <strong><a href="http://ecd.tencent.com/">腾讯电商用户体验设计部</a></strong></p>

<p>腾讯电商用户体验设计部，简称ecd（E-Commerce User Experience Design）,  由百余位充满激情与梦想的设计师组成，为腾讯电商相关产品提供专业的用户体验设计支持。 <br/>
我们一直在追逐一个梦想，渴求将我们的专业能力，渗透至品牌、平台、物流以及客服等关键环节，期望有一天，能为腾讯电商用户提供流畅、便捷以及舒适的在线购物体验。<br/>
如你所见，我们愿与你携手，一起来追逐这个梦想。</p>

<p>7  <strong><a href="http://tgideas.qq.com/">腾讯TGIdeas</a></strong></p>

<p>TGideas是腾讯游戏的专业设计团队，工作范围涉及腾讯游戏旗下各类网游产品的包装、创意、网站等设计工作，团队由专业的视觉设计师、网站重构工程师、FLASH动画设计师、视频包装设计师构成。我们希望：作为游戏产品在推广过程中的点子部门，给于各类游戏产品最震撼的视觉表现支持，最系统的前台开发支持，最直观的交互设计支持，以及最具创意的idea支持。
同时，作为游戏行业的设计团队，我们也希望每一名团队成员能够在这里能够找到“FUN”的意义，找到真正的快乐，找到属于自己的游戏人生。</p>

<p>8  <strong><a href="http://ur.alibaba-inc.com/">阿里用户体验中心</a></strong></p>

<p>“阿里用户体验中心”是为用户搭建的可以深入体验产品并主动反馈产品的平台。真正着手从用户的角度来思考，来体验，来提升产品品质。帮助用户更顺利、更高效、更无障碍的完成每一步的操作，并希望用户对阿里巴巴产品整体形成整体印象，在用户心中树立品牌形象。<br/>
许多互联网产品都在倡导以用户为中心的产品设计，也有专门设立的用户体验部门。现有各产品的用户体验中心的主要功能是方法的总结和团队形象的塑造，但几乎没有任何产品为用户搭建这样一个系统来提供用户主动反馈的平台。“阿里用户体验中心”由“调研项目展示”及“我对产品有话说”两个主要部分组成，“调研项目展示”、项目详情部分展示正在进行或已完结的调研项目，正在进行的项目根据研究方法邀请用户参加，例如； 线上问卷反馈、产品新版下载试用反馈等。已完结的项目，将展示该项目的研究成果摘要，用户可以在参与调研后，了解其参与项目的进展情况以及最终研究成果。“我对产品有话说”打破地域及人群的局限，整合淘宝网、天猫、聚划算、淘宝卖家服务、阿里妈妈、淘宝旅行、淘宝无线等产品平台，为用户提供统一的体验反馈入口。收集用户使用体验、使用感受、满意度，为相关产品的体验优化及发展趋势提供参考依据。</p>

<p>9  <strong><a href="http://mux.baidu.com/">百度无线用户体验部</a></strong></p>

<p>移动互联网——无限可能与梦想栖居的所在。<br/>
设备碎片化妨碍不了我们无限的创造力；<br/>
在限制中设计，就像在针尖上舞蹈。<br/>
立足以用户为中心的理念，致力于提高产品用户体验，<br/>
不求诞生于完美，期待迭代得精彩。<br/>
漫步于五花八门的手机操作系统中，<br/>
我们在思索着移动无线，我们在移动中无限思索，<br/>
关注行业动态，总结学习心得，<br/>
与您一起分享设计中的点点滴滴！</p>

<p>10 <strong><a href="http://ueo.baidu.com/">百度联盟用户体验中心</a></strong></p>

<p>世界在改变<br/>
你是不是改变世界的那个人？<br/>
你是否主宰过命运的船舵？<br/>
一往无前？或者总是随波逐流？<br/>
从第一刻到最后一刻， 世界是否因你而改变过？<br/>
我们是改变世界的人，我们是百度联盟用户体验团队。</p>

<p>11 <strong><a href="http://ued.baidu.com/">百度搜索用户体验中心</a></strong></p>

<p>致力于最好的用户搜索体验</p>

<p>12 <strong><a href="http://ued.taobao.org/blog/">淘宝UED</a></strong></p>

<p>为你呈现的，是我们想打动你的。不光是眼球，更希望内心共鸣，一直在行走，高歌或淡然，都是脚下踏实的步伐。一直在努力，成功或失败，最好的体验设计永远是下一个！  <br/>
我们致力于互联网视觉传达、交互设计、前端开发，关注用户体验研究、品牌形象管理、创意产业研发，我们只想做地球上最好的UED。</p>

<p>13 <strong><a href="http://ux.etao.com/">etao UED</a></strong></p>

<p>一淘UX团队，是一淘下的用户体验部门。<br/>
负责大淘宝的广告和无线，以及一淘网的用户体验工作。致力于为用户打造跨平台的统一的优良用户体验</p>

<p>14 <strong><a href="http://www.baiduux.com/blog/">百度泛用户体验</a></strong></p>

<p>嗨，欢迎来到UFO！<br/>
在这里，你会看到关于泛用户体验的360度全方位讨论和分享<br/>
无论是视觉设计、交互体验、还是前端开发、用户研究；<br/>
在这里，你能和大家一起交流、分享、研究、分析、体验<br/>
无论你是设计师、工程师，还是用户、网友……</p>

<p>泛用户体验平台，是以‘用户体验’为核心的跨专业分享平台。英文缩写为：UFO<br/>
“U”，是User Experience，代表用户体验；<br/>
“F”，为Front End Research and Development，意为前端技术；<br/>
“O”，指one，代表着我们每一个人，寓意为：想像、未来、领先、科技、神奇与分享。</p>

<p>我们始终坚持以用户为核心，将提升产品体验做为终极目标。<br/>
我们秉承“减法设计、从简出发”的理念，完成百度WEB产品的视觉、交互设计、前端开发，用户研究、内容优化等工作。<br/>
我们提供基于研究、设计与前端技术的一体化解决方案，使产品更加友好、易用，以进一步提升产品影响力和品牌满意度。<br/>
我们希望通过UFO泛用户体验平台更好的与同行交流，一同探讨，从而推动行业发展。</p>

<p>每一条航线都有码头，每一条道路也会都有起点，<br/>
我们从不同的IP地址出发，最终在这里相遇，泛用户体验，从你开始。</p>

<p>15 <strong><a href="http://uedc.163.com/">网易用户体验设计中心</a></strong></p>

<p>网易用户体验设计中心（User Experience Design Center），简称“设计中心（UEDC）”，成立于2008年底。崭新的团队赋予新的使命，我们将要以“不断提升网易产品用户体验，带给用户良好的上网感受”为目标而努力。目前设计中心服务的产品包括网易门户、邮箱、博客、无线、交友、基础产品等，这里聚合了100多名来自五湖四海的优秀设计师，努力打造“一流的”互联网设计团队!</p>

<p>科学的设计流程是良好设计品质的保障，我们从一开始就在努力尝试和优化现有的设计流程，现在，设计中心有着较为明确的分工和流程。中心内部用户研究团队、交互设计团队、视觉设计团队各自专注自身领域，又时时融合一起，对设计质量的提升有积极的推动作用。未来，我们会不断在实践中摸索出“最适合”我们的工作方式。</p>

<p>同样，设计品质的追求更体现在细节上面，我们本着“精雕细刻、精益求精”的态度琢磨每个细节，以“用户至上”的设计为出发点，兼顾“战略目标”完成每项设计。现在，我们门户、邮箱、博客等产品用户数达至数亿，每个页面凝结了我们的心血，作为设计师深感自豪的同时面对了更强大的挑战，我们会接受挑战并努力做好，因为我们会在用户的满足中找到自己的价值。</p>

<p>其实，我们要是说的不仅仅这些，我们会关心用户浏览、用户操作、用户感受，为了用户有更好的上网体验，我们一直会努力！</p>

<p>16 <strong><a href="http://udc.weibo.com/">微博UDC</a></strong></p>

<p>微博设计团队2009年组成，不断在SNS领域探索、壮大，2011年7月20日正式成立UDC设计部门，全称微博用户研究与体验设计中心(User Research &amp; Experience Design Center) ，致力于SNS用户体验设计，为微博产品提供专业解决方案。<br/>
我们还在成长，创造无限的空间与可能性；<br/>
我们不断求知，只为探索更新的领域;<br/>
我们追求卓越，怀揣梦想之心;</p>

<p>17 <strong><a href="http://www.uisdc.com/about">优设</a></strong></p>

<p>优秀网页设计联盟，SDC（Superior Design Consortium）简称“优设”，是有着专业设计师交流氛围的设计联盟。坚持开放、分享、成长的宗旨，每周召集众多设计总监、资深网页设计人员、设计爱好者等杰出人物，分享他们关于职业的技术、理念、思考和探索。同时，联盟为更依凭时下热门的微博为载体，以优推荐、优秀网页设计、找茬页、页话等多纬度传承分享联盟精神。这些优秀的作品也经常会出现在行业内的网站和论坛中</p>

<p>18 <strong><a href="http://ued.iciba.com/">金山词霸UED</a></strong></p>

<p>我们所做的一切都是围绕金山词霸这个产品，包括网页，UI设计，平面设计，前端框架等等，把最美的视觉呈现在您面前。<br/>
但，我们所做的不仅仅是这些，我们关心您的感受，关心您的体验<br/>
我们的目标是，做一流的互联网UED团队<br/>
用心做，做精彩</p>

<p>19 <strong><a href="http://ued.ctrip.com/blog/">携程网UED</a></strong></p>

<p><strong>我们的使命：</strong><br/>
做人性的网站，让在线预订过程成为一种享受，一种愉悦的经验；<br/>
让同事的在线工作方便快捷；<br/>
让携程的界面开发成为一件愉快的，充满智力挑战性，而不是体力挑战性的工作。<br/>
携程UED，这是一个血液中流淌着创意和活力的团队，在越来越关注严谨和灵活的过程中成长起来，我们对前端的需求如此强烈，如果你也身在其中你会看到：<br/>
我们每层有环绕办公区域的各种会议室，一起讨论需求、交流意见、项目Review；<br/>
我们有自己开发的下午茶订餐系统，拼Pizza、拼咖啡、拼麻辣烫；<br/>
我们有无数免费内部培训，关于业务的、技术的、生活的，当然报名要用秒杀的速度；<br/>
我们有公司和部门年会各种国外深度游、N部iPhone、iPad可以抽奖；<br/>
加班后有彻夜守候的“的哥”和香喷喷的烤肉大叔陪在公司门口；<br/>
休息时可以一起三国杀、一起德州扑克、一起打球……<br/>
如果你也和我们一样，对代码的完美有着执着的追求和无法掩饰的强迫症；<br/>
如果你也和我们一样，愿意花巨大精力优化页面性能，只为提高用户体验；<br/>
如果你也和我们一样，把前端开发当作值得奋斗一生的事业……<br/>
那么，快点发邮件吧，不要再等了，我们的团队期待有你的身影！</p>

<p>20 <strong><a href="http://www.kdued.com/">金蝶有意思用户体验团队</a></strong></p>

<p>用户体验是有意思的</p>

<p>21 <strong><a href="http://ued.sogou.com/">搜狗UED</a></strong></p>

<p>爱设计、爱分享<br/>
我们是搜狗设计团队  <br/>
Sogou设计团队始终坚持以用户为中心的设计理念，以提升产品体验与品牌影响力为战略目标，完成包括各部门产品视觉、交互设计、运营及品牌宣传等在内的设计工作，并广泛参与到公司各产品线的开发、研究、推广活动中，不断为各产品线注入创新思维，为提升品牌形象提供卓越的解决方案，是一支集活力、创新、探索、实践于一身的创意团队。<br/>
伴随互联网的发展，我们创造最in的视觉瞬间   在设备的更迭中，我们奉献最流畅的用户体验   在项目进行中，我们超越自我，感受创意迸发的快乐   在设计交流中，我们分享成长，执着前行 ……</p>

<h2>参考资料</h2>

<ol>
<li>国内各大互联网公司UED（用户体验设计）团队博客<br/>
By CSDN-dellheng<br/>
<a href="http://blog.csdn.net/dellheng/article/details/7248525">http://blog.csdn.net/dellheng/article/details/7248525</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Octopress在github上搭建自己的博客系统]]></title>
    <link href="http://cedar-renjun.github.io/blog/2014/03/19/how-to-build-your-blog-on-github-page-with-octopress/"/>
    <updated>2014-03-19T20:04:41+08:00</updated>
    <id>http://cedar-renjun.github.io/blog/2014/03/19/how-to-build-your-blog-on-github-page-with-octopress</id>
    <content type="html"><![CDATA[<h2>写在前面的话</h2>

<p>搞软件的，一般都晓得<a href="https://github.com">github</a>和<a href="http://stackoverflow.com/">stackoverflow</a>这两个著名网站，前者是分布式代码仓库，后者是技术问答社区，这里不做过多介绍</p>

<p>github在提供分布式代码管理功能的同时，也提供pages功能。借助于pages，程序员可以创建一个属于自己的博客</p>

<p>接下来，我会图文并茂的展示如何在github上搭建自己的博客系统</p>

<p>进行正式介绍之前，先界定适用人群和技术基础，免得浪费您的时间</p>

<p><strong>适用人群</strong> <br/>
喜欢折腾的IT攻城狮</p>

<p><strong>技术基础</strong> <br/>
了解git常用操作，熟悉markdown语法，熟悉HTML，CSS更好</p>

<p><strong>操作环境</strong> <br/>
windows7 32位</p>

<!-- more -->


<h2>1.  部署git</h2>

<p>git是所有操作的基石，让我们来在本地部署git</p>

<p>注：<br/>
*   如果您是git新手，请严格按照操作步骤，一步一步进行；<br/>
*   如果您非常熟悉git，请直接阅读1.4章节(配置)部分</p>

<h3>1.1  创建git账户和启用page空间</h3>

<p>首先我们需要有一个github的账户，在浏览器中敲入下面网址：</p>

<pre><code>https://github.com/
</code></pre>

<p>您会看到github的主页，</p>

<p><img src="http://cedar-renjun.github.io/images/2014/03/20/git_signup.jpg" title="Git Signup" alt="Git signup" /></p>

<p>这里我们注册一个新的账号，账户信息如下：</p>

<pre><code>账号名称：Git-Octopress-Demo
账号密码：Git-Octopress-123
邮箱地址：git_octopress_demo@163.com
</code></pre>

<p>点击<code>sigin Up for GitHub</code>后，出现下面界面</p>

<p><img src="http://cedar-renjun.github.io/images/2014/03/20/git_signup_conform.jpg" title="Git Signup Conform" alt="Git Signup Conform" /></p>

<p>首先确认<code>Choose your personal plan</code>一栏中选择的是<code>Free</code>，然后直接点击<code>Finsh sign up</code>即可<br/>
在接下来的界面中，点击<code>New repository</code>按钮来创建一个新仓库</p>

<p><img src="http://cedar-renjun.github.io/images/2014/03/20/Create_new_repository_1.jpg" title="Create new repository 1" alt="Create new repository 1" /></p>

<p>点击后，出现下面github仓库信息界面</p>

<p><img src="http://cedar-renjun.github.io/images/2014/03/20/Create_new_repository_2.jpg" title="Create new repository 2" alt="Create new repository 2" /></p>

<p>这里，仓库名称为必选项，且名字格式是固定的，为</p>

<pre><code>XXX.github.io
</code></pre>

<p>形式，XXX是用户的github账户名，所以，我们在仓库名一栏填写如下信息</p>

<pre><code>Git-Octopress-Demo.github.io
</code></pre>

<p>接下来是仓库描述和README信息，为可选项，可以不填</p>

<p>填写完成后，点击<code>Create Repository</code>完成创建工作，接下来到邮箱里面去验证信息，这里不做过多介绍</p>

<p>至此，我们已经成功的创建了一个github账户，并创建了一个page空间。其实，git上的博客系统分为两类</p>

<p><strong>用户page空间</strong><br/>
该空间是以用户名创建的page空间，挂载在master主分支上，每个用户最多只能有一个该空间</p>

<p><strong>仓库page空间</strong><br/>
该空间是github为每个仓库创建的page空间，必须挂载在gh-pages分支上，用户创建任意数量的仓库空间</p>

<p>更多信息，请参考<a href="https://help.github.com/articles/user-organization-and-project-pages">github page帮助页</a></p>

<h3>1.2  下载和安装git客户端</h3>

<p>注册github账户后，我们需要在本地PC上安装git客户端<br/>
您可以通过下面网址来下载最新windows版本git，并获得相应帮助</p>

<pre><code>https://help.github.com/articles/set-up-git
</code></pre>

<p>这个是在线安装的，过程很简单，不过因为git软件部署在亚马逊的AWS上，所以下载时间稍微有点长，请耐心等待</p>

<p>安装过程中，可能会输入用户名和用户密码</p>

<p>接下来，我们再配置全局用户名</p>

<pre><code>git config --global user.name "Git-Octopress-Demo"
# Git-Octopress-Demo 表示用户名，这里填写您自己的名字
</code></pre>

<p>配置全局邮箱地址</p>

<pre><code>git config --global user.email "git_octopress_demo@163.com"
# git_octopress_demo@163.com 表示用户邮箱地址，这里替换为您自己的邮箱地址
</code></pre>

<p><strong>注：命令中的两个双引号是可选的</strong></p>

<h3>1.3  配置</h3>

<h2>部署Ruby</h2>

<p>Octopress是用Ruby语言编写的，所以我们在本机上需要安装Ruby环境和DevKit</p>

<p><strong>特别注意:</strong> Ruby和DevKit的安装目录不能含有空格</p>

<h3>下载Ruby for windows</h3>

<p>rubyinstaller号称是windows上最简单的ruby安装方式，官方网址如下所示：</p>

<pre><code>http://rubyinstaller.org/
</code></pre>

<p>我们首先安装Ruby 1.9.3版本，这里要特别注意，必须是1.9.3版本，其它版本的不能很好的和octopress协同工作<br/>
下载链接如下所示：</p>

<pre><code>http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-1.9.3-p545.exe
</code></pre>

<p>占位符，图示安装过程</p>

<p>在安装快结束时，请确保勾选这3个选项</p>

<h3>安装Dev Kit</h3>

<p>因为后面会大量用到gem命令，所以需要Dev Kit</p>

<p><strong>特别注意：</strong>
无论您的系统是32位还是64位，这里的DevKit必须是32位版本，下载链接如下所示：</p>

<pre><code>https://github.com/downloads/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe
</code></pre>

<p>下载完成后，您会发现DevKit是一个自解压文件包，需要手工输入一些命令才能正确安装，这里我们先把DevKit解压到任何一个固定目录，假设为DevKit_Dir，接下来打开一个CMD窗口并CD到DevKit_Dir目录下</p>

<p><strong>Tips：</strong>如果你用的是win7，可以先选中DevKit_Dir文件夹，按住shift，然后鼠标右键，这时菜单项中会出现<code>在此处打开命令窗口</code>，选择该命令，就可以直接开启一个终端，并自动CD到选中的文件夹目录下，非常好用</p>

<p>在CMD终端里输入以下两条指令</p>

<pre><code>ruby dk.rb init
ruby dk.rb install
</code></pre>

<p>如果输完命令后，终端出现以下提示文字，则说明DevKit安装成功</p>

<p>占位符：官方Devkit提示文字</p>

<p>另官方提供的验证方法如下，供参考：</p>

<blockquote><p>  Confirm your Ruby environment is correctly using the DevKit by running gem install json &mdash;platform=ruby. JSON should install correctly and you should see with native extensions in the screen messages. Next run ruby -rubygems -e &ldquo;require &lsquo;json&rsquo;; puts JSON.load(&lsquo;[42]&rsquo;).inspect&rdquo; to confirm that the json gem is working.</p></blockquote>

<p>关于Devkit的更多详细信息，请参考：<br/>
<a href="https://github.com/oneclick/rubyinstaller/wiki/Development-Kit">https://github.com/oneclick/rubyinstaller/wiki/Development-Kit</a></p>

<h2>部署Python</h2>

<p>octopress官方没有说要安装python，但如果您需要代码高亮功能，则必须安装python，为了避免后期麻烦，我们建议安装ActivePython-2.7.6.9-win32-x86.msi，下载链接如下：</p>

<pre><code>http://downloads.activestate.com/ActivePython/releases/2.7.6.9/ActivePython-2.7.6.9-win32-x86.msi
</code></pre>

<p>在安装后，手工将python可执行路径添加到系统环境变量</p>

<p>至此，我们完成了Python的部署</p>

<h2>部署Octopress</h2>

<h3>下载和安装octopress</h3>

<p>CD到MyBlog目录下，然后输入下面的指令</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
</code></pre>

<p>octopress下载完毕，下面安装依赖项</p>

<pre><code>gem install bundler 
bundle install
</code></pre>

<p>安装过程中需要从网上下载一些更新包，第一次时间稍微有些长，请耐心等待</p>

<h3>配置slash主题</h3>

<p>slash主题是专为octopress设计的极简风格主题，不仅具有默认主题所有功能，还能自适应各种终端设备，自动调整图片和视频大小，同时具有丰富的插件</p>

<p>在终端中输入如下命令来下载并安装slash主题</p>

<pre><code>git clone git://github.com/tommy351/Octopress-Theme-Slash.git .themes/slash
rake install ['slash'] 
rake generate
</code></pre>

<p><strong>特别注意</strong>  如果使用上面命令后，无法正确显示主题，请用下面命令</p>

<pre><code>git clone git://github.com/tommy351/Octopress-Theme-Slash.git .themes/slash
rake install \['slash'\]
rake generate
</code></pre>

<p>来代替</p>

<p>至此，octopress和对应主题安装完毕</p>

<h2>发布博客系统</h2>

<p>接下来让我们发布我们的第一个博客文章</p>

<pre><code>gem new_post["Hello world"]
</code></pre>

<p>进入<code>\source\_post</code>文件夹下，就可以看到<code>2014-03-19-Hello-world.markdown</code>文件，这时，您可以使用任何顺手的文本编辑工具来编辑该文件，同时需要记得将该文件的编码格式调整为<code>UTF-8 无BOM</code></p>

<p>编辑完成后，接下来，我们输入下面的指令还生成相应的静态网站</p>

<pre><code>rake generate  # 生成静态网站
</code></pre>

<p>我们可以通过下面的指令来在本地预览网站</p>

<pre><code>rake preview # 预览网站
</code></pre>

<p>不用关闭窗口，直接在浏览器中打开<code>http://localhost:4000/</code>
这时，当我们修改*.markdown文件后，octopress会自动重新生成静态网站，这时，我们只需要在浏览器中手工刷新界面，就可以看到修改后的效果</p>

<p>当我们编写成满意的网站之后，便可以用下面指令，把新作的修改推送到github服务器上</p>

<pre><code>rake deploy # 推送更新
</code></pre>

<p>这仅仅是将master分支推送到了github服务器，我们可以通过下面指令来手工将source分支也推送到github服务器上去</p>

<pre><code>git add .                      # 添加所有更新
git commit -m "First Commit"   # 编写commit记录  
git push origin source         # 推送source分支到github source分支
</code></pre>

<h2>注意事项</h2>

<p><strong>1 正确显示中文文档的方法</strong></p>

<ul>
<li>md文件采用英文命名方式</li>
<li>md中title项可以为中文，同时用双引号包括中文字符串</li>
<li>md正文可以采用中文</li>
<li>md文件编码格式为UTF-8，无BOM</li>
</ul>


<p><strong>2 输入<code>rake preview</code>命令后，在浏览器中打开<code>localhost:4000</code>，打开速度非常慢或者完全打不开</strong></p>

<ul>
<li>请检测浏览器是否设置代理模式，如果有，则取消</li>
</ul>


<p><strong>3 代码无高亮或者markdown中含有代码高亮部分时，博客系统无法显示，或者输出一片空白</strong><br/>
请考虑</p>

<ul>
<li>python的版本是不是2.7.X</li>
<li>python路径是不是添加环境变量到系统中</li>
</ul>


<p><strong>4 出现Error:invalid byte sequence in GB2312</strong></p>

<p>这是中文编码的错误，如果是写英文博客就不会出错，这似乎是 Jekyll 的一个 bug，解决方法是将 Ruby 安装文件路径下的 .\lib\ruby\gems\1.9.1\gems\jekyll-1.1.2\lib\jekyll\convertible.rb 文件第 31 行：</p>

<pre><code>self.content = File.read(File.join(base, name))
</code></pre>

<p>修改为：</p>

<pre><code>self.content = File.read(File.join(base, name), :encoding =&gt; "utf-8")
</code></pre>

<p>这样便可成功启动本地服务器进行调试。</p>

<p><strong>5 代码高亮中的linenos和mark无效</strong></p>

<p>这个暂时无解</p>

<h2>参考资料</h2>

<ol>
<li><a href="https://github.com/">github主页</a></li>
<li><a href="http://pages.github.com/">github pages</a></li>
<li><a href="http://github.github.com/github-flavored-markdown/">markdown语法</a></li>
<li><a href="https://stackedit.io/">markdown在线编辑器，stackio</a></li>
<li><a href="http://jekyllrb.com">jekyll项目主页</a></li>
<li><a href="http://www.w3cschool.cn/">w3cschool网络技术培训</a></li>
<li><a href="http://octopress.org">octopress项目主页</a></li>
<li><a href="http://zespia.tw/Octopress-Theme-Slash/index.html">slash主题</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[医院信息化建设]]></title>
    <link href="http://cedar-renjun.github.io/blog/2014/03/19/rebuild-hospital-via-it-information/"/>
    <updated>2014-03-19T19:48:45+08:00</updated>
    <id>http://cedar-renjun.github.io/blog/2014/03/19/rebuild-hospital-via-it-information</id>
    <content type="html"><![CDATA[<h2><strong>前言</strong></h2>

<p>最近去医院做检查，耗了两天时间，办了多少事呢？</p>

<blockquote><ul>
<li>周一上午在省中医院做普通体检</li>
<li>周一下午在武警总院挂呼吸内科，做胸透</li>
<li>周二下午在武警总院挂呼吸内科，做CT扫描</li>
</ul>
</blockquote>

<p>也就是说，两天的时间，仅仅完成了病前准备工作，时间主要耗费在：</p>

<blockquote><ol>
<li>  公交时间
<strong>1小时左右</strong></li>
<li>  挂号
<strong>一般2个小时</strong></li>
<li>  做胸透，CT等结果
<strong>做完1个半小时后拿结果</strong></li>
</ol>
</blockquote>

<p>病人的时间是最不值钱的，80%都在坐着空耗时间</p>

<p>同时，也发现了一些医院流程上的问题，比如：</p>

<blockquote><ol>
<li>  病人挂号时，不能清楚的确定要挂哪个科室</li>
<li>  病人不能快速方便的找到某个科室，常常需要问护士</li>
<li>  在挂号时，病人优先选择专家号，只有专家号满的时候，才会不情愿的去挂普通医生，那么普通医生应该如何逆袭呢？</li>
</ol>
</blockquote>

<p>在发现问题后，手机也没电，在医院耗着也没事儿，就开始琢磨怎么解决这些问题
接下来重点分析以下几个问题，并提供自己的解决方案</p>

<p><strong>1.  诊断流程不清晰，病人找不到诊室</strong>
<strong>2.  挂号后，等待时间过长</strong>
<strong>3.  普通医师怎么做才能反超专家号</strong>
<strong>4.  如何克服大型检查项目时间过长的问题</strong>
<strong>5.  周边的商机</strong></p>

<p>在分析和解决问题之前，先自问一下：</p>

<blockquote><p>  什么是问题？
  解决方案的评判标准是什么？</p></blockquote>

<p>我对问题的理解是：</p>

<blockquote><p>  <strong>有效时间比过低的行为或流程，都是潜在的问题</strong></p></blockquote>

<p>这里的有效时间比是指：核心环节和整个事件流程的时间比值
简单的说，在无用事情上浪费时间越少越好
如果你好，我好，大家好，那么这个解决方案就是最好的，so，评判标准也就出来了</p>

<blockquote><p>  <strong>从个体和整体来分析，有效时间比达到整体最优，为最佳解决方案</strong></p></blockquote>

<p>ok，下面逐个讨论</p>

<blockquote><p>  注：
  1：下面的讨论以及解决方案，仅仅根据我在&lt;湖北省中医院>&lt;广州军区武警总医院>两个医院的实际体验为背景信息，其它医院流程和信息化可能有所差别，so，这里提供的解决方案，仅供参考
  2：某些解决方案，可能现阶段来说，不太现实；未来5-10年内一定会有的</p></blockquote>

<!-- more -->


<h2><strong>问题分析以及解决方案</strong></h2>

<h3><strong>1.  诊断流程不清晰，病人找不到诊室</strong></h3>

<h4>问题描述</h4>

<pre><code>我们都是只晓得不舒服，但具体要挂哪个科室，心里没谱，只有求助于护士，有了自助挂号机后，部分的减少了护士的接待压力；同时，在具体就诊时，经常会验血，做CT，挂吊针等等，医院的门诊那么多，分布在角角落落，第一次就诊的时候，不清楚，只有求助于护士或看地图；
</code></pre>

<h4>解决方案</h4>

<pre><code>【挂号科室不清楚】
现阶段，借助于医院的丰富诊断数据，可以做一个半自动化诊断系统APP，病人在挂号前，就可以借助于这个APP来确定需要挂的科室，直接的降低护士服务压力和提供就诊准确度
APP的交互形式，可以是语音（类siri）或者在线网页
注意，这里的半自动是指过程半自动化：只有当人察觉到身体不舒服后，才会去利用诊断系统判断病情
后期，等可穿戴设备兴起后，形式完全就反转过来了，这些设备完全接管人的健康状态，当检测到身体指标不正常时，会提醒你注意健康状况，并给出对应的解决方案。
可穿戴设备，可以是最近很火的手环，也可以是能进入血管的超微型机器人

【找不到医院门诊】
室内地图和室内定位(ibeacon)+虚拟现实技术可以完美的解决这个问题，想象一下，你进医院后，会在眼前看到3-D的虚拟室内地图，如果需要到下一个科室，直接会虚拟3-D地图的方式来导引你到目的地，同时会显示目的地的人流密度和排队情况，prefect
ok，这个方案理论上非常成熟，需要时间来普及，相信用不了几年，各大超市，医院都会引入该系统。其中的难点是医院内部系统和地图供应商的无缝协助，目测难度很大，很可能的形式是医院推出专用的APP
</code></pre>

<h3><strong>2.  挂号后，等待时间过长</strong></h3>

<h4>问题描述</h4>

<pre><code>在刷卡挂号后，病人们开始在诊室门前排队等候，某些医院能看到前面的排队人数，某些不能。在那里耗着也没事儿，离开吧，又怕突然轮到自己了，so，啥事都干不了，只好干等着了
</code></pre>

<h4>解决方案</h4>

<pre><code>问题的根源在于信息发布渠道的单一性，病人只能通过唯一的渠道（就科室门口那个通知牌）来获取信息
找到问题根源了，解决方法就很明显了
扩大化通知渠道，将单一通知改为分布式通知
比如推出个手机APP，搞个微信公共账号啥的，病人先加入通知列表，然后就可以该干嘛干嘛去，当系统发现你前面还有3个人时，就主动推送信息到病人手机上，然后，病人就赶紧回来，老老实实的等着吧
不晓得各位注意到没，这个方案，解决了避免浪费大量时间，那病人多出来的时间怎么办呢？
这就是商机，在附件搞个小型的书店或咖啡店啥的，生意肯定很火，是吧^_^
</code></pre>

<h3><strong>3.  普通医师怎么做才能反超专家号</strong></h3>

<h4>问题描述</h4>

<pre><code>病人在挂号时，肯定都希望自己挂最好的专家，但是专家每天的号数是固定的，只能挂这么多人，so，只有当专家号满时，才会轮到科室医师
ok，问题来了，我们换个角色，你作为科室医师，肯定希望能做到专家级别，肯定希望别人都来挂自己的号，how？
</code></pre>

<h4>解决方案</h4>

<blockquote><p>注：本部分待整理</p></blockquote>

<pre><code>首先，进行SWTO分析
1.  医师拿到的病人数量和质量是确定的，无法更改，so，忽略这个因素
2.  医师和专家的技术有差距，这个需要接受的现实
3.  只有实际医术达到一定水平，才能成为专家，必须要时刻提醒自己

我们的目的是：成为专家级
so，可能采取的措施
1.  在私底下拼命学习，通过某类考试，获得职称
2.  理论+实践+态度
3.  跟某个专家级的师傅来学习

这里仅讨论，如何加速措施2，即
如何有效的留住病人，并拓展口碑


主要突破点，利用互联网工具，加强与病人交互，保持跟踪回馈，确保来一个留住一个
</code></pre>

<h3><strong>4.  如何克服大型检查项目时间过长的问题</strong></h3>

<h4>问题描述</h4>

<pre><code>在做CT，MRI，胸透时，经常是1-2小时后取结果，怎么缩短这个时间？
</code></pre>

<h4>解决方案</h4>

<pre><code>时间浪费在哪里了？出胶片？专家会诊？
再问一句，为什么需要胶片，电子的不行？
现在信息化程度这么高，都是电子化的，为什么还需要胶片？个人认为只要非跨院操作，都可以采用电子档在各个诊室交互

【专家会诊？这块儿不理解，后期考察论证后补全】
</code></pre>

<h2><strong>商机</strong></h2>

<p> 注：本节留空，待细化</p>

<pre><code>1.  医院缺自动售货机
2.  医院缺图书借阅机制
3.  医院缺充电装置
3.  医院缺WIFI
</code></pre>

<h2><strong>潜在风险预估</strong></h2>

<p> 注：本节留空，待细化</p>
]]></content>
  </entry>
  
</feed>
