<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Enjoy Programming, Enjoy Life]]></title>
  <link href="http://cedar-renjun.github.io/atom.xml" rel="self"/>
  <link href="http://cedar-renjun.github.io/"/>
  <updated>2014-03-20T16:54:00+08:00</updated>
  <id>http://cedar-renjun.github.io/</id>
  <author>
    <name><![CDATA[Cedar]]></name>
    <email><![CDATA[819280802@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用Octopress在github上搭建自己的博客系统]]></title>
    <link href="http://cedar-renjun.github.io/blog/2014/03/19/how-to-build-your-blog-on-github-page-with-octopress/"/>
    <updated>2014-03-19T20:04:41+08:00</updated>
    <id>http://cedar-renjun.github.io/blog/2014/03/19/how-to-build-your-blog-on-github-page-with-octopress</id>
    <content type="html"><![CDATA[<h2>写在前面的话</h2>

<p>搞软件的，一般都晓得<a href="https://github.com">github</a>和<a href="http://stackoverflow.com/">stackoverflow</a>这两个著名网站，前者是分布式代码仓库，后者是技术问答社区，这里不做过多介绍</p>

<p>github在提供分布式代码管理功能的同时，也提供pages功能。借助于pages，程序员可以创建一个属于自己的博客</p>

<p>接下来，我会图文并茂的展示如何在github上搭建自己的博客系统</p>

<p>进行正式介绍之前，先界定适用人群和技术基础，免得浪费您的时间</p>

<p><strong>适用人群</strong> <br/>
喜欢折腾的IT攻城狮</p>

<p><strong>技术基础</strong> <br/>
了解git常用操作，熟悉markdown语法，熟悉HTML，CSS更好</p>

<p><strong>操作环境</strong> <br/>
windows7 32位</p>

<!-- more -->


<h2>1.  部署git</h2>

<p>git是所有操作的基石，让我们来在本地部署git</p>

<p>注：<br/>
*   如果您是git新手，请严格按照操作步骤，一步一步进行；<br/>
*   如果您非常熟悉git，请直接阅读1.4章节(配置)部分</p>

<h3>1.1  创建git账户和启用page空间</h3>

<p>首先我们需要有一个github的账户，在浏览器中敲入下面网址：</p>

<pre><code>https://github.com/
</code></pre>

<p>您会看到github的主页，</p>

<p><img src="http://cedar-renjun.github.io/images/2014/03/20/git_signup.jpg" title="Git Signup" alt="Git signup" /></p>

<p>这里我们注册一个新的账号，账户信息如下：</p>

<pre><code>账号名称：Git-Octopress-Demo
账号密码：Git-Octopress-123
邮箱地址：git_octopress_demo@163.com
</code></pre>

<p>点击<code>sigin Up for GitHub</code>后，出现下面界面</p>

<p><img src="http://cedar-renjun.github.io/images/2014/03/20/git_signup_conform.jpg" title="Git Signup Conform" alt="Git Signup Conform" /></p>

<p>首先确认<code>Choose your personal plan</code>一栏中选择的是<code>Free</code>，然后直接点击<code>Finsh sign up</code>即可<br/>
在接下来的界面中，点击<code>New repository</code>按钮来创建一个新仓库</p>

<p><img src="http://cedar-renjun.github.io/images/2014/03/20/Create_new_repository_1.jpg" title="Create new repository 1" alt="Create new repository 1" /></p>

<p>点击后，出现下面github仓库信息界面</p>

<p><img src="http://cedar-renjun.github.io/images/2014/03/20/Create_new_repository_2.jpg" title="Create new repository 2" alt="Create new repository 2" /></p>

<p>这里，仓库名称为必选项，且名字格式是固定的，为</p>

<pre><code>XXX.github.io
</code></pre>

<p>形式，XXX是用户的github账户名，所以，我们在仓库名一栏填写如下信息</p>

<pre><code>Git-Octopress-Demo.github.io
</code></pre>

<p>接下来是仓库描述和README信息，为可选项，可以不填</p>

<p>填写完成后，点击<code>Create Repository</code>完成创建工作，接下来到邮箱里面去验证信息，这里不做过多介绍</p>

<p>至此，我们已经成功的创建了一个github账户，并创建了一个page空间。其实，git上的博客系统分为两类</p>

<p><strong>用户page空间</strong><br/>
该空间是以用户名创建的page空间，挂载在master主分支上，每个用户最多只能有一个该空间</p>

<p><strong>仓库page空间</strong><br/>
该空间是github为每个仓库创建的page空间，必须挂载在gh-pages分支上，用户创建任意数量的仓库空间</p>

<p>更多信息，请参考<a href="https://help.github.com/articles/user-organization-and-project-pages">github page帮助页</a></p>

<h3>1.2  下载和安装git客户端</h3>

<p>注册github账户后，我们需要在本地PC上安装git客户端<br/>
您可以通过下面网址来下载最新windows版本git，并获得相应帮助</p>

<pre><code>https://help.github.com/articles/set-up-git
</code></pre>

<p>这个是在线安装的，过程很简单，不过因为git软件部署在亚马逊的AWS上，所以下载时间稍微有点长，请耐心等待</p>

<p>安装过程中，可能会输入用户名和用户密码</p>

<p>接下来，我们再配置全局用户名</p>

<pre><code>git config --global user.name "Git-Octopress-Demo"
# Git-Octopress-Demo 表示用户名，这里填写您自己的名字
</code></pre>

<p>配置全局邮箱地址</p>

<pre><code>git config --global user.email "git_octopress_demo@163.com"
# git_octopress_demo@163.com 表示用户邮箱地址，这里替换为您自己的邮箱地址
</code></pre>

<p><strong>注：命令中的两个双引号是可选的</strong></p>

<h3>1.3  配置</h3>

<h2>部署Ruby</h2>

<p>Octopress是用Ruby语言编写的，所以我们在本机上需要安装Ruby环境和DevKit</p>

<p><strong>特别注意:</strong> Ruby和DevKit的安装目录不能含有空格</p>

<h3>下载Ruby for windows</h3>

<p>rubyinstaller号称是windows上最简单的ruby安装方式，官方网址如下所示：</p>

<pre><code>http://rubyinstaller.org/
</code></pre>

<p>我们首先安装Ruby 1.9.3版本，这里要特别注意，必须是1.9.3版本，其它版本的不能很好的和octopress协同工作<br/>
下载链接如下所示：</p>

<pre><code>http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-1.9.3-p545.exe
</code></pre>

<p>占位符，图示安装过程</p>

<p>在安装快结束时，请确保勾选这3个选项</p>

<h3>安装Dev Kit</h3>

<p>因为后面会大量用到gem命令，所以需要Dev Kit</p>

<p><strong>特别注意</strong><br/>
无论您的系统是32位还是64位，这里的DevKit必须是32位版本，下载链接如下所示：</p>

<pre><code>https://github.com/downloads/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe
</code></pre>

<p>下载完成后，您会发现DevKit是一个自解压文件包，需要手工输入一些命令才能正确安装，这里我们先把DevKit解压到任何一个固定目录，假设为DevKit_Dir，接下来打开一个CMD窗口并CD到DevKit_Dir目录下</p>

<p><strong>Tips：</strong>如果你用的是win7，可以先选中DevKit_Dir文件夹，按住shift，然后鼠标右键，这时菜单项中会出现<code>在此处打开命令窗口</code>，选择该命令，就可以直接开启一个终端，并自动CD到选中的文件夹目录下，非常好用</p>

<p>在CMD终端里输入以下两条指令</p>

<pre><code>ruby dk.rb init
ruby dk.rb install
</code></pre>

<p>如果输完命令后，终端出现以下提示文字，则说明DevKit安装成功</p>

<p>占位符：官方Devkit提示文字</p>

<p>另官方提供的验证方法如下，供参考：</p>

<blockquote><p>  Confirm your Ruby environment is correctly using the DevKit by running gem install json &mdash;platform=ruby. JSON should install correctly and you should see with native extensions in the screen messages. Next run ruby -rubygems -e &ldquo;require &lsquo;json&rsquo;; puts JSON.load(&lsquo;[42]&rsquo;).inspect&rdquo; to confirm that the json gem is working.</p></blockquote>

<p>关于Devkit的更多详细信息，请参考：<br/>
<a href="https://github.com/oneclick/rubyinstaller/wiki/Development-Kit">https://github.com/oneclick/rubyinstaller/wiki/Development-Kit</a></p>

<h2>部署Python</h2>

<p>octopress官方没有说要安装python，但如果您需要代码高亮功能，则必须安装python，为了避免后期麻烦，我们建议安装ActivePython-2.7.6.9-win32-x86.msi，下载链接如下：</p>

<pre><code>http://downloads.activestate.com/ActivePython/releases/2.7.6.9/ActivePython-2.7.6.9-win32-x86.msi
</code></pre>

<p>在安装后，手工将python可执行路径添加到系统环境变量</p>

<p>至此，我们完成了Python的部署</p>

<h2>部署Octopress</h2>

<h3>下载和安装octopress</h3>

<h3>安装slash主题</h3>

<p>slash主题是专为octopress设计的极简风格主题，不仅具有默认主题所有功能，还能自适应各种终端设备，自动调整图片和视频大小，同时具有丰富的插件</p>

<p>在终端中输入如下命令来下载并安装slash主题</p>

<pre><code>git clone git://github.com/tommy351/Octopress-Theme-Slash.git .themes/slash
rake install ['slash'] 
rake generate
</code></pre>

<p><strong>特别注意</strong>  如果使用上面命令后，无法正确显示主题，请用下面命令</p>

<pre><code>git clone git://github.com/tommy351/Octopress-Theme-Slash.git .themes/slash
rake install \['slash'\]
rake generate
</code></pre>

<p>来代替</p>

<h2>发布博客系统</h2>

<p>接下来让我们发布我们的第一个博客文章</p>

<pre><code>gem new_post["Hello world"]
</code></pre>

<p>进入<code>\source\_post</code>文件夹下，就可以看到<code>2014-03-19-Hello-world.markdown</code>文件，这时，您可以使用任何顺手的文本编辑工具来编辑该文件，同时需要记得将该文件的编码格式调整为<code>UTF-8 无BOM</code></p>

<p>编辑完成后，接下来，我们输入下面的指令还生成相应的静态网站</p>

<pre><code>rake generate  # 生成静态网站
</code></pre>

<p>我们可以通过下面的指令来在本地预览网站</p>

<pre><code>rake preview # 预览网站
</code></pre>

<p>不用关闭窗口，直接在浏览器中打开<code>http://localhost:4000/</code>
这时，当我们修改*.markdown文件后，octopress会自动重新生成静态网站，这时，我们只需要在浏览器中手工刷新界面，就可以看到修改后的效果</p>

<p>当我们编写成满意的网站之后，便可以用下面指令，把新作的修改推送到github服务器上</p>

<pre><code>rake deploy # 推送更新
</code></pre>

<p>这仅仅是将master分支推送到了github服务器，我们可以通过下面指令来手工将source分支也推送到github服务器上去</p>

<pre><code>git add .                      # 添加所有更新
git commit -m "First Commit"   # 编写commit记录  
git push origin source         # 推送source分支到github source分支
</code></pre>

<h2>注意事项</h2>

<p><strong>1. 正确显示中文文档的方法</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>md文件采用英文命名方式  
</span><span class='line'>md中title项可以为中文，同时用双引号包括中文字符串  
</span><span class='line'>md正文可以采用中文  
</span><span class='line'>md文件编码格式为UTF-8，无BOM</span></code></pre></td></tr></table></div></figure>


<p><strong>2. 输入<code>rake preview</code>命令后，在浏览器中打开<code>localhost:4000</code>，打开速度非常慢或者完全打不开</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>请检测浏览器是否设置代理模式，如果有，则取消</span></code></pre></td></tr></table></div></figure>


<p><strong>3. 代码无高亮或者markdown中含有代码高亮部分时，博客系统无法显示，或者输出一片空白</strong><br/>
请考虑</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python的版本是不是2.7.X  
</span><span class='line'>python路径是不是添加环境变量到系统中</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<ol>
<li><a href="https://github.com/">github主页</a></li>
<li><a href="http://pages.github.com/">github pages</a></li>
<li><a href="http://github.github.com/github-flavored-markdown/">markdown语法</a></li>
<li><a href="https://stackedit.io/">markdown在线编辑器，stackio</a></li>
<li><a href="http://jekyllrb.com">jekyll项目主页</a></li>
<li><a href="http://www.w3cschool.cn/">w3cschool网络技术培训</a></li>
<li><a href="http://octopress.org">octopress项目主页</a></li>
<li><a href="http://zespia.tw/Octopress-Theme-Slash/index.html">slash主题</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[医院信息化建设]]></title>
    <link href="http://cedar-renjun.github.io/blog/2014/03/19/rebuild-hospital-via-it-information/"/>
    <updated>2014-03-19T19:48:45+08:00</updated>
    <id>http://cedar-renjun.github.io/blog/2014/03/19/rebuild-hospital-via-it-information</id>
    <content type="html"><![CDATA[<h2><strong>前言</strong></h2>

<p>最近去医院做检查，耗了两天时间，办了多少事呢？</p>

<blockquote><ul>
<li>周一上午在省中医院做普通体检</li>
<li>周一下午在武警总院挂呼吸内科，做胸透</li>
<li>周二下午在武警总院挂呼吸内科，做CT扫描</li>
</ul>
</blockquote>

<p>也就是说，两天的时间，仅仅完成了病前准备工作，时间主要耗费在：</p>

<blockquote><ol>
<li>  公交时间
<strong>1小时左右</strong></li>
<li>  挂号
<strong>一般2个小时</strong></li>
<li>  做胸透，CT等结果
<strong>做完1个半小时后拿结果</strong></li>
</ol>
</blockquote>

<p>病人的时间是最不值钱的，80%都在坐着空耗时间</p>

<p>同时，也发现了一些医院流程上的问题，比如：</p>

<blockquote><ol>
<li>  病人挂号时，不能清楚的确定要挂哪个科室</li>
<li>  病人不能快速方便的找到某个科室，常常需要问护士</li>
<li>  在挂号时，病人优先选择专家号，只有专家号满的时候，才会不情愿的去挂普通医生，那么普通医生应该如何逆袭呢？</li>
</ol>
</blockquote>

<p>在发现问题后，手机也没电，在医院耗着也没事儿，就开始琢磨怎么解决这些问题
接下来重点分析以下几个问题，并提供自己的解决方案</p>

<p><strong>1.  诊断流程不清晰，病人找不到诊室</strong>
<strong>2.  挂号后，等待时间过长</strong>
<strong>3.  普通医师怎么做才能反超专家号</strong>
<strong>4.  如何克服大型检查项目时间过长的问题</strong>
<strong>5.  周边的商机</strong></p>

<p>在分析和解决问题之前，先自问一下：</p>

<blockquote><p>  什么是问题？
  解决方案的评判标准是什么？</p></blockquote>

<p>我对问题的理解是：</p>

<blockquote><p>  <strong>有效时间比过低的行为或流程，都是潜在的问题</strong></p></blockquote>

<p>这里的有效时间比是指：核心环节和整个事件流程的时间比值
简单的说，在无用事情上浪费时间越少越好
如果你好，我好，大家好，那么这个解决方案就是最好的，so，评判标准也就出来了</p>

<blockquote><p>  <strong>从个体和整体来分析，有效时间比达到整体最优，为最佳解决方案</strong></p></blockquote>

<p>ok，下面逐个讨论</p>

<blockquote><p>  注：
  1：下面的讨论以及解决方案，仅仅根据我在&lt;湖北省中医院>&lt;广州军区武警总医院>两个医院的实际体验为背景信息，其它医院流程和信息化可能有所差别，so，这里提供的解决方案，仅供参考
  2：某些解决方案，可能现阶段来说，不太现实；未来5-10年内一定会有的</p></blockquote>

<!-- more -->


<h2><strong>问题分析以及解决方案</strong></h2>

<h3><strong>1.  诊断流程不清晰，病人找不到诊室</strong></h3>

<h4>问题描述</h4>

<pre><code>我们都是只晓得不舒服，但具体要挂哪个科室，心里没谱，只有求助于护士，有了自助挂号机后，部分的减少了护士的接待压力；同时，在具体就诊时，经常会验血，做CT，挂吊针等等，医院的门诊那么多，分布在角角落落，第一次就诊的时候，不清楚，只有求助于护士或看地图；
</code></pre>

<h4>解决方案</h4>

<pre><code>【挂号科室不清楚】
现阶段，借助于医院的丰富诊断数据，可以做一个半自动化诊断系统APP，病人在挂号前，就可以借助于这个APP来确定需要挂的科室，直接的降低护士服务压力和提供就诊准确度
APP的交互形式，可以是语音（类siri）或者在线网页
注意，这里的半自动是指过程半自动化：只有当人察觉到身体不舒服后，才会去利用诊断系统判断病情
后期，等可穿戴设备兴起后，形式完全就反转过来了，这些设备完全接管人的健康状态，当检测到身体指标不正常时，会提醒你注意健康状况，并给出对应的解决方案。
可穿戴设备，可以是最近很火的手环，也可以是能进入血管的超微型机器人

【找不到医院门诊】
室内地图和室内定位(ibeacon)+虚拟现实技术可以完美的解决这个问题，想象一下，你进医院后，会在眼前看到3-D的虚拟室内地图，如果需要到下一个科室，直接会虚拟3-D地图的方式来导引你到目的地，同时会显示目的地的人流密度和排队情况，prefect
ok，这个方案理论上非常成熟，需要时间来普及，相信用不了几年，各大超市，医院都会引入该系统。其中的难点是医院内部系统和地图供应商的无缝协助，目测难度很大，很可能的形式是医院推出专用的APP
</code></pre>

<h3><strong>2.  挂号后，等待时间过长</strong></h3>

<h4>问题描述</h4>

<pre><code>在刷卡挂号后，病人们开始在诊室门前排队等候，某些医院能看到前面的排队人数，某些不能。在那里耗着也没事儿，离开吧，又怕突然轮到自己了，so，啥事都干不了，只好干等着了
</code></pre>

<h4>解决方案</h4>

<pre><code>问题的根源在于信息发布渠道的单一性，病人只能通过唯一的渠道（就科室门口那个通知牌）来获取信息
找到问题根源了，解决方法就很明显了
扩大化通知渠道，将单一通知改为分布式通知
比如推出个手机APP，搞个微信公共账号啥的，病人先加入通知列表，然后就可以该干嘛干嘛去，当系统发现你前面还有3个人时，就主动推送信息到病人手机上，然后，病人就赶紧回来，老老实实的等着吧
不晓得各位注意到没，这个方案，解决了避免浪费大量时间，那病人多出来的时间怎么办呢？
这就是商机，在附件搞个小型的书店或咖啡店啥的，生意肯定很火，是吧^_^
</code></pre>

<h3><strong>3.  普通医师怎么做才能反超专家号</strong></h3>

<h4>问题描述</h4>

<pre><code>病人在挂号时，肯定都希望自己挂最好的专家，但是专家每天的号数是固定的，只能挂这么多人，so，只有当专家号满时，才会轮到科室医师
ok，问题来了，我们换个角色，你作为科室医师，肯定希望能做到专家级别，肯定希望别人都来挂自己的号，how？
</code></pre>

<h4>解决方案</h4>

<blockquote><p>注：本部分待整理</p></blockquote>

<pre><code>首先，进行SWTO分析
1.  医师拿到的病人数量和质量是确定的，无法更改，so，忽略这个因素
2.  医师和专家的技术有差距，这个需要接受的现实
3.  只有实际医术达到一定水平，才能成为专家，必须要时刻提醒自己

我们的目的是：成为专家级
so，可能采取的措施
1.  在私底下拼命学习，通过某类考试，获得职称
2.  理论+实践+态度
3.  跟某个专家级的师傅来学习

这里仅讨论，如何加速措施2，即
如何有效的留住病人，并拓展口碑


主要突破点，利用互联网工具，加强与病人交互，保持跟踪回馈，确保来一个留住一个
</code></pre>

<h3><strong>4.  如何克服大型检查项目时间过长的问题</strong></h3>

<h4>问题描述</h4>

<pre><code>在做CT，MRI，胸透时，经常是1-2小时后取结果，怎么缩短这个时间？
</code></pre>

<h4>解决方案</h4>

<pre><code>时间浪费在哪里了？出胶片？专家会诊？
再问一句，为什么需要胶片，电子的不行？
现在信息化程度这么高，都是电子化的，为什么还需要胶片？个人认为只要非跨院操作，都可以采用电子档在各个诊室交互

【专家会诊？这块儿不理解，后期考察论证后补全】
</code></pre>

<h2><strong>商机</strong></h2>

<p> 注：本节留空，待细化</p>

<pre><code>1.  医院缺自动售货机
2.  医院缺图书借阅机制
3.  医院缺充电装置
3.  医院缺WIFI
</code></pre>

<h2><strong>潜在风险预估</strong></h2>

<p> 注：本节留空，待细化</p>
]]></content>
  </entry>
  
</feed>
